name: CI JSON Checker

on:
  pull_request:
    branches: [main]
    paths:
      - "contributors/*.json"

concurrency:
    group: ${{ github.ref }}-ci
    cancel-in-progress: true

jobs:
    initialize:
      runs-on: ubuntu-latest
      name: Fetching Data
      permissions: write-all
      outputs:
        user: ${{ steps.init.outputs.PR_AUTHOR }}
        delete_message: ${{steps.checker.outputs.ERROR_DELETE}}
        deleted_content: ${{steps.get_pr.outputs.deleted_files}}
      steps:
      - uses: actions/checkout@v4

      - name: Fetch PR information
        id: init
        if: github.event_name == 'pull_request'
        run: |
            echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >>  "$GITHUB_OUTPUT"
        env:
            GH_TOKEN: ${{ github.token }}

      - name: Get changed files
        id: get_pr
        uses: tj-actions/changed-files@v46

      - name: Verify the content
        id: checker
        run: |
              # we expect you to create 1 json file
              if [ "${{steps.get_pr.outputs.all_changed_files_count}}" != "1" ]; then

                echo "ERROR_COUNT= - You can only create 1 JSON file per Contributor" >>  "$GITHUB_OUTPUT"

              elif [ "${{steps.get_pr.outputs.all_changed_files_count}}" == "1" ]; then

                temp_var_name="${{steps.init.outputs.PR_AUTHOR}}"
                lower_name="${temp_var_name,,}"

                # check if JSON file is yours
                if [[ "${{steps.get_pr.outputs.all_changed_files}}" != *"$lower_name"* ]]; then

                echo "ERROR_FILE= - Invalid file name, please visit [file name guidelines](https://first-accord.js.org/docs/#/json-structure?id=filename)" >>  "$GITHUB_OUTPUT"

                fi

                # check if JSON file is valid and not empty
                if ! jq empty ${{steps.get_pr.outputs.all_changed_files}} >/dev/null 2>&1; then

                echo "ERROR_CONTENT= - Invalid JSON format!" >>  "$GITHUB_OUTPUT"

                fi

                # json content
                content=${{steps.get_pr.outputs.all_changed_files}}

                #check if owner key exist
                if ! jq -e 'has("owner")' $content > /dev/null; then
                  echo "ERROR_REQ_OWNER= - owner" >>  "$GITHUB_OUTPUT"
                fi

                # check if owner.name key exist
                if ! jq -e '.owner | has("name")' $content > /dev/null; then
                  echo "ERROR_REQ_OWNER_NAME= - owner/name" >>  "$GITHUB_OUTPUT"
                fi

                # check if owner.email key exist
                if ! jq -e '.owner | has("email")' "$content" > /dev/null; then
                  echo "ERROR_REQ_OWNER_EMAIL= - owner/email" >>  "$GITHUB_OUTPUT"
                fi
                if ! jq -e 'has("use_github_avatar")' "$content" > /dev/null; then
                  echo "ERROR_REQ_PIC= - use_github_avatar" >>  "$GITHUB_OUTPUT";
                else
                  isPic=$(jq -r '.use_github_avatar' "$content")
                  if [ "$isPic" = "true" ]; then
                    echo "JSON_USE_PIC=$isPic" >>  "$GITHUB_OUTPUT";
                  fi
                fi

                # check for profanity in owner.name
                if jq -r '.owner.name' $content | grep -Fiq -f <(curl -s "https://raw.githubusercontent.com/{owner}/profanity-filter/refs/heads/main/src/ProfanityFilter.Services/Data/GoogleBannedWords.txt"); then
                  echo "PROFANITY_1= - Possible Profanity in Name" >>  "$GITHUB_OUTPUT";
                  echo "Profanity detected in Name!"
                fi

                # check for profanity in description
                if jq -r '.description' $content | grep -Fiq -f <(curl -s "https://raw.githubusercontent.com/{owner}/profanity-filter/refs/heads/main/src/ProfanityFilter.Services/Data/GoogleBannedWords.txt"); then
                  echo "PROFANITY_2= - Possible Profanity in Description" >>  "$GITHUB_OUTPUT";
                  echo "Profanity detected!"
                fi

                # check for profanity in display_float_text
                if jq -r '.display_float_text' $content | grep -Fiq -f <(curl -s "https://raw.githubusercontent.com/{owner}/profanity-filter/refs/heads/main/src/ProfanityFilter.Services/Data/GoogleBannedWords.txt"); then
                  echo "PROFANITY_3= - Possible Profanity in Display Float Text" >>  "$GITHUB_OUTPUT";
                  echo "Profanity detected in Display Float Text!"
                  fi
              fi

              # check if there is a deleted file
              if [ "${{steps.get_pr.outputs.deleted_files_count}}" -gt 1 ]; then
                  echo "ERROR_DELETE= - You can only delete/remove 1 JSON file per Contributor." >>  "$GITHUB_OUTPUT"
              elif [ "${{steps.get_pr.outputs.deleted_files_count}}" -eq 1 ]; then

                if [[ "${{steps.get_pr.outputs.all_changed_files}}" != *"$lower_name"* ]]; then

                echo "ERROR_DELETE= - You can't delete/remove the file that is not your contribution." >>  "$GITHUB_OUTPUT"

                fi
              fi

      - name: Checking JSON result 1
        if: ${{ steps.checker.outputs.ERROR_COUNT || steps.checker.outputs.ERROR_FILE || steps.checker.outputs.ERROR_CONTENT || steps.checker.outputs.ERROR_DELETE }}
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            Invalid PR due to:
            ${{steps.checker.outputs.ERROR_COUNT}}
            ${{ steps.checker.outputs.ERROR_FILE }}
            ${{ steps.checker.outputs.ERROR_CONTENT }}
            ${{steps.checker.outputs.ERROR_DELETE}}
            For more info, please visit our [documentation](https://first-accord.js.org/docs/#/json-structure)

      - name: Closing JSON result 1
        if: ${{steps.checker.outputs.ERROR_COUNT || steps.checker.outputs.ERROR_FILE || steps.checker.outputs.ERROR_CONTENT ||steps.checker.outputs.ERROR_DELETE}}
        run: |
              gh pr close ${{ github.event.pull_request.number }} --comment "Auto-closing pull request, you are welcome to reopen or create a new pull request."
              gh pr edit ${{ github.event.pull_request.number }} --add-label "invalid"
              exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checking JSON result 2
        if: ${{steps.checker.outputs.ERROR_REQ_OWNER||steps.checker.outputs.ERROR_REQ_OWNER_NAME||steps.checker.outputs.ERROR_REQ_OWNER_EMAIL||steps.checker.outputs.ERROR_REQ_PIC}}
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            Required Items can't be found:
              ${{steps.checker.outputs.ERROR_REQ_OWNER}}
              ${{steps.checker.outputs.ERROR_REQ_OWNER_NAME}}
              ${{steps.checker.outputs.ERROR_REQ_OWNER_EMAIL}}
              ${{steps.checker.outputs.ERROR_REQ_PIC}}

            For more info about the `Required Items`, please [visit here](https://first-accord.js.org/docs/#/json-structure)

      - name: closing JSON result 2
        if: ${{steps.checker.outputs.ERROR_REQ_OWNER||steps.checker.outputs.ERROR_REQ_OWNER_NAME||steps.checker.outputs.ERROR_REQ_OWNER_EMAIL||steps.checker.outputs.ERROR_REQ_PIC}}
        run: |
              gh pr edit ${{ github.event.pull_request.number }} --add-label "invalid"
              exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checking JSON result 3
        if: ${{steps.checker.outputs.PROFANITY_1||steps.checker.outputs.PROFANITY_2 || steps.checker.outputs.PROFANITY_3||steps.checker.outputs.JSON_USE_PIC}}
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            Requesting @STICKnoLOGIC, kindly review the possible problem:
              ${{steps.checker.outputs.PROFANITY_1}}
              ${{steps.checker.outputs.PROFANITY_2}}
              ${{steps.checker.outputs.PROFANITY_3}}
              ${{steps.checker.outputs.JSON_USE_PIC}}
            Thank you! üòÅüòÅ

      - name: closing JSON 3 result
        if: ${{ steps.checker.outputs.ERROR_DELETE && steps.get_pr.outputs.deleted_files_count != 1 }}
        run: |
              labels="r: Yhal"
              if [ ${{steps.checker.outputs.PROFANITY_1 !='' || steps.checker.outputs.PROFANITY_2 !='' || steps.checker.outputs.PROFANITY_3 !=''}} == true ]; then
                labels+=",possible Profanity"
              fi
              if [ ${{steps.checker.outputs.JSON_USE_PIC != ''}} == true ]; then
                labels+=",r: Yhal-avatar"
              fi
              OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
              echo "Assigning repository owner ($OWNER) as reviewer"
              gh pr edit ${{ github.event.pull_request.number }} --add-label "$labels" --add-reviewer "$OWNER"

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    delete:
      needs: initialize
      permissions: write-all
      runs-on: ubuntu-latest
      name: when Deleting JSON
      steps:
      # - uses: actions/checkout@v4
      - name: checking
        if: ${{ needs.initialize.outputs.delete_message == '' && needs.initialize.outputs.deleted_content }}
        run: |
            gh pr edit ${{ github.event.pull_request.number }} --add-label "r: Yhal,to Delete"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
